{
	"info": {
		"_postman_id": "fce38ca9-d0eb-45a5-9150-ecd0073ecd0d",
		"name": "GoRestAPITesting_Working",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30345637"
	},
	"item": [
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"// extract id created to set it as a collection variable\r",
							"var createdUserId = jsonData.id;\r",
							"console.log(createdUserId);\r",
							"// pm.collectionVariables.set(\"id\", createdUserId);\r",
							"pm.environment.set(\"id\", createdUserId);                // setting as environment variable\r",
							"\r",
							"// Note: cases do matter in javascript, so bookingId and bookingid are not same\r",
							"\r",
							"// Generated via Postbot\r",
							"// Response Schema Validation Tests \r",
							"pm.test(\"Response is an object with valid schema\", function () {\r",
							"  pm.expect(pm.response.json()).to.be.an('object').that.has.property('id');\r",
							"  pm.expect(pm.response.json()).to.be.an('object').that.has.property('name');\r",
							"  pm.expect(pm.response.json()).to.be.an('object').that.has.property('email');\r",
							"  pm.expect(pm.response.json()).to.be.an('object').that.has.property('gender');\r",
							"  pm.expect(pm.response.json()).to.be.an('object').that.has.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.gender).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Email is in a valid format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
							"});\r",
							"\r",
							"pm.test(\"Gender is either 'male' or 'female'\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.gender).to.exist.and.to.be.oneOf(['male', 'female']);\r",
							"});\r",
							"\r",
							"pm.test(\"Status is either active or inactive\", function () {\r",
							"  const responseData = pm.response.json();  \r",
							"  pm.expect(responseData.status).to.exist.and.to.be.oneOf([\"active\", \"inactive\"]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response message 'when user with same email already exists'\", function () {\r",
							"    const responseMessage = pm.response.json()[0].message;\r",
							"    \r",
							"    pm.expect(responseMessage).to.equal(\"has already been taken\"); // checking only partial message\r",
							"    \r",
							"    // pm.expect(responseMessage).to.have.jsonBody({               // This did not work\r",
							"    //     \"field\": \"email\",\r",
							"    //     \"message\": \"has already been taken\"\r",
							"    // })\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\": \"K Samarth\",\r\n        \"email\": \"{{$randomFirstName}}@mcclure.test\",\r\n        \"gender\": \"male\",\r\n        \"status\": \"inactive\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://gorest.co.in/public/v2/users",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get A Specific User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// pm.test(\"Body is correct\", function () {\r",
							"//     pm.response.to.have.body(\"response_body_string\");\r",
							"// });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer ACCESS-TOKEN"
					}
				],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/{{id}}",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer ACCESS-TOKEN"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "    {\r\n        \"name\": \"K2 Samarth\",\r\n        \"status\": \"active\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/{{id}}",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer ACCESS-TOKEN"
					}
				],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users/{{id}}",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Users Again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://gorest.co.in/public/v2/users",
					"protocol": "https",
					"host": [
						"gorest",
						"co",
						"in"
					],
					"path": [
						"public",
						"v2",
						"users"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "default"
		},
		{
			"key": "id",
			"value": "5390661"
		}
	]
}